<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_74047_centene.EmailFileImportUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>EmailFileImportUtils</name>
        <script><![CDATA[var EmailFileImportUtils = Class.create();

EmailFileImportUtils.prototype = {

       initialize: function() {

       },

       

       scheduleImport: function(dataSourceID, transformMapIDs) {

               /*

                 * Create scheduled job to process import

                 *

                 * The inbound email action will generate an import data source, however the attachment isn't copied to the data source until

                 * after the insert of the record.   The code below will create a scheduled job to process the import 30 seconds later

                 * so that attachment has time to be copied to the data source from the email.

                 */

               

               var schRec = new GlideRecord("sys_trigger");

               schRec.name = "Load Data Source: " + dataSourceID;

               schRec.trigger_type = 0;   // Run Once

               schRec.script = "new global.EmailFileImportUtils().loadImportSet('" + dataSourceID + "', '" + transformMapIDs + "')";

               

               var nextAction = new GlideDateTime();

               nextAction.addSeconds(30);   // 30 seconds should be enough time however this can be changed.

               schRec.next_action = nextAction;

               schRec.insert();

       },

       

       loadImportSet: function(dataSourceID, transformMapIDs) {

               // Get Datasource Record

               var dataSource = new GlideRecord("sys_data_source");

               dataSource.get(dataSourceID);

               

               // Process data source file

               var loader = new GlideImportSetLoader();

               var importSetRec = loader.getImportSetGr(dataSource);

               var ranload = loader.loadImportSetTable(importSetRec, dataSource);

               importSetRec.state = "loaded";

               importSetRec.update();

               

               // Transform import set

               var transformWorker = new GlideImportSetTransformerWorker(importSetRec.sys_id, transformMapIDs);

               transformWorker.setBackground(true);

               transformWorker.start();

       },

       

       type: 'EmailFileImportUtils'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>shan</sys_created_by>
        <sys_created_on>2018-05-23 19:46:27</sys_created_on>
        <sys_id>d84ae778db561300f7ac78eebf9619bb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>EmailFileImportUtils</sys_name>
        <sys_package display_value="CENTENE" source="x_74047_centene">428169a0db121300f7ac78eebf961935</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CENTENE">428169a0db121300f7ac78eebf961935</sys_scope>
        <sys_update_name>sys_script_include_d84ae778db561300f7ac78eebf9619bb</sys_update_name>
        <sys_updated_by>shan</sys_updated_by>
        <sys_updated_on>2018-05-23 19:46:27</sys_updated_on>
    </sys_script_include>
</record_update>
